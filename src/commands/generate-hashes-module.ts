import * as vscode from 'vscode';
import { saveWorkspaceFile, showTextDocument } from "../utils/common";
import { DefoldFileIndexer, DefoldIndex, IDefoldComponent } from "../utils/defold-file-indexer";
import { Command } from "./command";

export class GenerateHashesModule extends Command {
    private lines: string[] = [];
    
    async execute() {
        vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: '',
            cancellable: true,
        }, async (progress, token) => {
            progress.report({ message: 'Indexing game files' });
            const index = await DefoldFileIndexer.indexWorkspace();

            progress.report({ message: 'Generating the Lua module' });
            this.generateHashes(index);
            await saveWorkspaceFile(`generated/h.lua`, this.lines.join('\n'));
            await showTextDocument(`generated/h.lua`);
        });
    }

    private generateHashes(index: DefoldIndex) {
        this.append(`-- generated by Defold Buddy extension`);
        this.append(`local M = {}`);

        for (const collection of index.collections) {
            this.append(``);
            this.append(`--- ${collection.path}`);
            this.append(`M.${collection.name} = {}`);
            for (const instance of collection.instances) {
                const instanceId = formatId(instance.id);
                const instanceHash = `hash("${formatUrl(instance.url)}")`;

                this.append(``);
                if (instance.collection || instance.prototype) {
                    this.append(`--- ${instance.collection || instance.prototype}`);
                }
                this.append(`M.${collection.name}.${instanceId} = ${instanceHash}`);

                // instance's components
                this.appendMany(generateComponentHashes(instance.components, collection.name, instanceId));

                // TODO: referenced .collection's instances
                // referenced .go's components
                // if (instance.prototype) {
                //     const file = index.gameObjects.find(x => x.path === instance.prototype);
                //     if (!file) { continue; }
                    
                //     const prototypeComponents = file.components.map(x => {
                //         return {
                //             ...x,
                //             url: `/${instance.id}${x.url}`,
                //         };
                //     });
                //     this.appendMany(generateComponentHashes(prototypeComponents, collection.name, instanceId));
                // }
            }
        }

        this.append(``);
        this.append(`return M`);

        function generateComponentHashes(components: IDefoldComponent[], filename: string, instanceId: string): string[] {
            const res = [];
            //this.append(`M.${instanceId} = ${instanceHash}`);
            for (const component of components) {
                const componentHash = `hash("${formatUrl(component.url)}")`;

                if (component.component) {
                    res.push(`--- ${component.component}`);
                }
                res.push(`M.${filename}.${instanceId}_${formatId(component.id)} = ${componentHash}`);
                //res.push(`M.${instanceId}_${formatId(component.id)} = ${componentHash}`);
            }
            return res;
        }
    }

    private append(line: string) {
        this.lines.push(line);
    }

    private appendMany(lines: string[]) {
        for (let i = 0; i < lines.length; i++) {
            this.lines.push(lines[i]);
        }
    }
}

/////////////

function formatUrl(value: string): string {
    return value.replace(/"/g, '\\"');
}

function formatId(value: string) {
    return value.replace(/\W/g, '_');
}
